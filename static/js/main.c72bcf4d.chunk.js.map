{"version":3,"sources":["Components/Searchbox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundry.js","constants.js","Containers/App.js","action.js","reportWebVitals.js","reducers.js","index.js"],"names":["Searchbox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","React","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c72bcf4d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue tc' \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={ searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}200x200`}/>\r\n            <div>\r\n                <h2 className='f2'>{name}</h2>\r\n                <p className='f4'>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return(\r\n                        <Card\r\n                            key = {robots[i].id}\r\n                            name = {robots[i].name}\r\n                            email = {robots[i].email}\r\n                            id = {robots[i].id}\r\n                        />\r\n                     );\r\n                \r\n                })\r\n            }      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError : true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That is not good to see</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport Searchbox from '../Components/Searchbox.js'\r\nimport CardList from '../Components/CardList.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundry from '../Components/ErrorBoundry.js'\r\nimport './App.css';\r\n\r\nimport { requestRobots, setSearchField } from '../action.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField, //creates a prop and maps a state from store to it and passes it to App.js\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)), //takes the searchChange prop dispatches it as an action which is passed on to the reducer\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }   \r\n    \r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props \r\n        const filteredRobots = robots.filter(\r\n            robot=> {\r\n                return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n            }\r\n        )\r\n\r\n        return isPending ?\r\n        <h1>Loading</h1> :    \r\n        (\r\n            <div className='tc'>\r\n                <h1 className=\"f-headline\">Robofriends</h1>\r\n                <Searchbox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots = { filteredRobots }/>\r\n                    </ErrorBoundry>\r\n                    \r\n                </Scroll>\r\n            </div>        \r\n        );\r\n    }\r\n}\r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({ \r\n    type: CHANGE_SEARCHFIELD, \r\n    payload: text \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => { //thunk middleware detects actions that return a fuction instead of an object and passes dispatch fuction to it\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n      case CHANGE_SEARCHFIELD:\r\n        return Object.assign({}, state, {searchField: action.payload}) //returns new object {} that has everthing in the initalState which is state and update the serachField property with action.payload \r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending:false})\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './Containers/App.js';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers.js'\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={ store }>\n      <div>\n        <App />\n      </div>\n    </Provider>\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}